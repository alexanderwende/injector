{"version":3,"file":"index.cjs.js","sources":["../src/utils/index.ts","../src/annotations/metadata-keys.ts","../src/annotations/index.ts","../src/inject-token.ts","../src/decorators/inject.ts","../src/decorators/injectable.ts","../src/decorators/optional.ts","../src/factories/class-factory.ts","../src/factories/singleton-factory.ts","../src/factories/value-factory.ts","../src/providers/base-provider.ts","../src/providers/class-provider.ts","../src/providers/singleton-provider.ts","../src/providers/value-provider.ts","../src/injector.ts"],"sourcesContent":["export type Constructor<T = any> = { new (...args: any[]): T; }\n\nexport const isConstructor = (constructorFn: any): constructorFn is Constructor => {\n\n    return constructorFn instanceof Function && constructorFn.prototype && constructorFn.prototype.constructor === constructorFn;\n};\n\nexport const isSymbol = (symbol: any): symbol is Symbol => {\n\n    return typeof symbol === 'symbol';\n};\n","/**\n * @internal\n */\nexport const DESIGN_TYPE = 'design:type';\n\n/**\n * @internal\n */\nexport const DESIGN_PARAMETER_TYPES = 'design:paramtypes';\n\n/**\n * @internal\n */\nexport const TOKEN = 'ioc:token';\n\n/**\n * @internal\n */\nexport const PARAMETERS = 'ioc:parameters';\n\n/**\n * @internal\n */\nexport const PROPERTIES = 'ioc:properties';\n","import '@abraham/reflection';\nimport { InjectToken } from '../inject-token';\nimport { Constructor } from '../utils';\nimport * as ANNOTATION from './metadata-keys';\n\n/**\n * @internal\n */\nexport { ANNOTATION };\n\nexport interface ParameterAnnotation<T = any> {\n    token: InjectToken<T> | Constructor<T>;\n    optional: boolean;\n}\n\nexport interface PropertyAnnotation<T = any> {\n    token: InjectToken<T> | Constructor<T>;\n    optional: boolean;\n}\n\n/**\n * @internal\n */\nexport const getTokenAnnotation = <T> (target: Constructor<T>): InjectToken<T> | undefined => {\n\n    return Reflect.getOwnMetadata(ANNOTATION.TOKEN, target);\n};\n\n/**\n * @internal\n */\nexport const setTokenAnnotation = <T> (target: Constructor<T>, token: InjectToken<T>): void => {\n\n    Reflect.defineMetadata(ANNOTATION.TOKEN, token, target);\n};\n\n/**\n * @internal\n */\nexport const getParameterAnnotation = (target: Constructor, parameterIndex: number): ParameterAnnotation => {\n\n    ensureParameterAnnotations(target);\n\n    return (Reflect.getOwnMetadata(ANNOTATION.PARAMETERS, target) as ParameterAnnotation[])[parameterIndex];\n};\n\n/**\n * @internal\n */\nexport const getParameterAnnotations = (target: Constructor): ParameterAnnotation[] => {\n\n    ensureParameterAnnotations(target);\n\n    return Reflect.getOwnMetadata(ANNOTATION.PARAMETERS, target) as ParameterAnnotation[];\n};\n\n/**\n * @internal\n */\nexport const ensureParameterAnnotations = (target: Constructor) => {\n\n    if (!Reflect.hasOwnMetadata(ANNOTATION.PARAMETERS, target)) {\n\n        const parameterTypes: Constructor[] = Reflect.getOwnMetadata(ANNOTATION.DESIGN_PARAMETER_TYPES, target) || [];\n        const parameterAnnotations: ParameterAnnotation[] = parameterTypes.map(type => createParameterAnnotation(type));\n\n        Reflect.defineMetadata(ANNOTATION.PARAMETERS, parameterAnnotations, target);\n    }\n};\n\n/**\n * @internal\n */\nexport const getPropertyAnnotation = (target: Constructor, propertyKey: string): PropertyAnnotation => {\n\n    ensurePropertyAnnotation(target, propertyKey);\n\n    return (Reflect.getOwnMetadata(ANNOTATION.PROPERTIES, target) as { [key: string]: PropertyAnnotation })[propertyKey];\n};\n\n/**\n * @internal\n */\nexport const getPropertyAnnotations = (target: Constructor): { [key: string]: PropertyAnnotation } => {\n\n    ensurePropertyAnnotations(target);\n\n    return Reflect.getOwnMetadata(ANNOTATION.PROPERTIES, target) as { [key: string]: PropertyAnnotation };\n};\n\n/**\n * @internal\n */\nexport const ensurePropertyAnnotations = (target: Constructor) => {\n\n    if (!Reflect.hasOwnMetadata(ANNOTATION.PROPERTIES, target)) {\n\n        Reflect.defineMetadata(ANNOTATION.PROPERTIES, {}, target);\n    }\n};\n\n/**\n * @internal\n */\nexport const ensurePropertyAnnotation = (target: Constructor, propertyKey: string) => {\n\n    const properties = getPropertyAnnotations(target);\n\n    if (!properties.hasOwnProperty(propertyKey)) {\n\n        const propertyType: InjectToken | Constructor = Reflect.getOwnMetadata(ANNOTATION.DESIGN_TYPE, target.prototype, propertyKey) as InjectToken | Constructor;\n\n        properties[propertyKey] = createPropertyAnnotation(propertyType);\n    }\n};\n\n/**\n * @internal\n */\nexport const createParameterAnnotation = <T> (token: InjectToken<T> | Constructor<T>, optional = false): ParameterAnnotation<T> => ({\n    token: token,\n    optional: optional\n});\n\n/**\n * @internal\n */\nexport const createPropertyAnnotation = <T> (token: InjectToken<T> | Constructor<T>, optional = false): PropertyAnnotation<T> => ({\n    token: token,\n    optional: optional\n});\n","import { Constructor, isConstructor, isSymbol } from './utils';\n\nexport class InjectToken<T = any> {\n\n    description: string;\n\n    value: Symbol;\n\n    constructor (value: Constructor<T> | symbol | string) {\n\n        if (isConstructor(value)) {\n\n            this.value = Symbol.for(value.name);\n            this.description = value.name;\n\n        } else if (isSymbol(value)) {\n\n            this.value = value;\n            this.description = value.toString();\n\n        } else {\n\n            this.value = Symbol.for(value);\n            this.description = value;\n        }\n    }\n}\n","import { getParameterAnnotation, getPropertyAnnotation, getTokenAnnotation } from '../annotations';\nimport { InjectToken } from '../inject-token';\nimport { Constructor } from '../utils';\n\n/**\n * @internal\n */\nexport const CLASS_NOT_INJECTABLE = (constructorFn: Constructor) => new Error(`Class '${ constructorFn.name }' has not been decorated as injectable and cannot be injected.`);\n\nexport const inject = <T> (constructorOrToken?: Constructor<T> | InjectToken<T>) => {\n\n    return (target: Object, propertyKey: string | symbol, parameterIndex?: number): void => {\n\n        const isParameterDecorator = typeof parameterIndex === 'number';\n\n        const token: Constructor<T> | InjectToken<T> | undefined = (constructorOrToken instanceof InjectToken)\n            ? constructorOrToken\n            : (constructorOrToken instanceof Function)\n                ? getTokenAnnotation(constructorOrToken)\n                : (isParameterDecorator)\n                    ? getParameterAnnotation(target as Constructor, parameterIndex!).token\n                    : getPropertyAnnotation(target.constructor as Constructor, propertyKey as string).token;\n\n        // token can only be undefined, when injecting a class type\n        if (!token) {\n\n            throw CLASS_NOT_INJECTABLE(constructorOrToken as Constructor);\n        }\n\n        if (isParameterDecorator) {\n\n            // decorator is a parameter decorator\n            const parameterAnnotation = getParameterAnnotation(target as Constructor, parameterIndex!);\n\n            parameterAnnotation.token = token;\n\n        } else {\n\n            // decorator is a property decorator\n            const propertyAnnotation = getPropertyAnnotation(target.constructor as Constructor, propertyKey as string);\n\n            propertyAnnotation.token = token;\n        }\n    };\n};\n","import { setTokenAnnotation } from '../annotations';\nimport { InjectToken } from '../inject-token';\nimport { Constructor } from '../utils';\n\nexport const injectable = () => {\n\n    return (target: Constructor<object>) => {\n\n        const token = new InjectToken(target);\n\n        setTokenAnnotation(target, token);\n    };\n};\n","import { getParameterAnnotation, getPropertyAnnotation } from '../annotations';\nimport { Constructor } from '../utils';\n\nexport const optional = () => {\n\n    return (target: Object, propertyKey: string | symbol, parameterIndex?: number): void => {\n\n        if (typeof parameterIndex === 'number') {\n\n            // decorator is a parameter decorator\n            const parameterAnnotation = getParameterAnnotation(target as Constructor<any>, parameterIndex);\n\n            parameterAnnotation.optional = true;\n\n        } else {\n\n            // decorator is a property decorator\n            const propertyAnnotation = getPropertyAnnotation(target.constructor as Constructor<any>, propertyKey as string);\n\n            propertyAnnotation.optional = true;\n        }\n    };\n};\n","import { Constructor } from '../utils';\nimport { Factory } from './factory';\n\nexport interface ClassFactory<T> extends Factory<T> {\n    (...dependencies: any[]): T;\n}\n\nexport const createClassFactory = <T> (constructorFn: Constructor<T>): ClassFactory<T> => {\n\n    return (...dependencies: any[]) => {\n\n        return Reflect.construct(constructorFn, dependencies);\n    };\n};\n","import { Constructor } from '../utils';\nimport { Factory } from './factory';\n\nexport interface SingletonFactory<T> extends Factory<T> {\n    (...dependencies: any[]): T;\n}\n\nexport const createSingletonFactory = <T> (constructorFn: Constructor<T>): SingletonFactory<T> => {\n\n    let instance: T;\n\n    return (...dependencies: any[]) => {\n\n        if (!instance) instance = Reflect.construct(constructorFn, dependencies);\n\n        return instance;\n    };\n};\n","import { Factory } from './factory';\n\nexport interface ValueFactory<T> extends Factory<T> {\n    (): T;\n}\n\nexport const createValueFactory = <T> (value: T): ValueFactory<T> => {\n\n    return () => value;\n};\n","import { ParameterAnnotation, PropertyAnnotation } from '../annotations';\nimport { Factory } from '../factories';\nimport { Injector } from '../injector';\nimport { Provider } from './provider';\n\n/**\n * @internal\n */\nexport const PROVIDER_UNREGISTERED = new Error('Provider is not registered with an injector.');\n\nexport class BaseProvider<T> implements Provider<T> {\n\n    public injector: Injector | undefined;\n\n    constructor (\n        public factory: Factory<T>,\n        public dependencies: ParameterAnnotation[] = [],\n        public properties: { [key: string]: PropertyAnnotation } = {}) { }\n\n    provide (injector?: Injector): T {\n\n        if (!injector) injector = this.injector;\n\n        if (!injector) throw PROVIDER_UNREGISTERED;\n\n        const dependencies = this.resolveDependencies(injector);\n\n        const properties = this.resolveProperties(injector);\n\n        return this.createValue(dependencies, properties);\n    }\n\n    resolveDependencies (injector: Injector): any[] {\n\n        return this.dependencies.map(dependency => injector.resolve(dependency.token, dependency.optional));\n    }\n\n    resolveProperties (injector: Injector): { [key: string]: any } {\n\n        return Object.entries(this.properties).reduce((result, [key, value]) => {\n\n            result[key] = injector.resolve(value.token, value.optional);\n\n            return result;\n\n        }, {} as { [key: string]: any });\n    }\n\n    createValue (dependencies: any[] = [], properties: { [key: string]: any } = {}): T {\n\n        const value = this.factory(...dependencies);\n\n        return (value instanceof Object) ? Object.assign(value, properties) : value;\n    }\n}\n","import { getParameterAnnotations, getPropertyAnnotations, ParameterAnnotation, PropertyAnnotation } from '../annotations';\nimport { createClassFactory } from '../factories';\nimport { Constructor } from '../utils';\nimport { BaseProvider } from './base-provider';\n\nexport class ClassProvider<T> extends BaseProvider<T> {\n\n    constructor (\n        constructorFn: Constructor<T>,\n        dependencies?: ParameterAnnotation[],\n        properties?: { [key: string]: PropertyAnnotation }) {\n\n        super(\n            createClassFactory(constructorFn),\n            dependencies || getParameterAnnotations(constructorFn),\n            properties || getPropertyAnnotations(constructorFn)\n        );\n    }\n}\n","import { ClassProvider } from './class-provider';\n\nexport class SingletonProvider<T> extends ClassProvider<T> {\n\n    protected _instance: T | undefined;\n\n    provide (): T {\n\n        if (!this._instance) this._instance = super.provide();\n\n        return this._instance;\n    }\n}\n","import { createValueFactory } from '../factories';\nimport { BaseProvider } from './base-provider';\n\nexport class ValueProvider<T> extends BaseProvider<T> {\n\n    constructor (value: any) {\n\n        super(createValueFactory(value));\n    }\n}\n","import { getTokenAnnotation } from './annotations';\nimport { InjectToken } from './inject-token';\nimport { ClassProvider, Provider } from './providers';\nimport { Constructor } from './utils';\n\n/**\n * @internal\n */\nexport const CLASS_NOT_PROVIDABLE = (constructorFn: Constructor) => new Error(`Class '${ constructorFn.name }' has not been decorated as injectable and cannot be resolved.`);\n\n/**\n * @internal\n */\nexport const NO_PROVIDER = (token: InjectToken) => new Error(`No provider has been found for the requested token '${ token.description }'.`);\n\n/**\n * The injector class\n */\nexport class Injector {\n\n    private _registry: Map<InjectToken<any>, Provider<any>> = new Map();\n\n    private _parent: Injector | null = null;\n\n    /**\n     * Creates an injector instance.\n     *\n     * @remarks\n     * A child injector can be created by passing the parent injector as a constructor argument.\n     *\n     * ```typescript\n     * const rootInjector = new Injector();\n     * const childInjector = new Injector(rootInjector);\n     * ```\n     *\n     * @param parent - A parent injector\n     */\n    constructor (parent?: Injector) {\n\n        if (parent) this._parent = parent;\n    }\n\n    /**\n     * Provide a provider for a dependency to the injector\n     *\n     * @param constructorOrToken - A class constructor or {@link InjectToken} to provide\n     * @param provider - A {@link Provider} which will be used to resolve the class or token\n     */\n    provide<T> (constructorOrToken: Constructor<T> | InjectToken<T>, provider: Provider<T>) {\n\n        const token: InjectToken<T> | undefined = constructorOrToken instanceof InjectToken\n            ? constructorOrToken\n            : getTokenAnnotation(constructorOrToken);\n\n        // class was not decorated with @injectable, throw\n        if (!token) throw CLASS_NOT_PROVIDABLE(constructorOrToken as Constructor);\n\n        provider.injector = this;\n\n        this._registry.set(token, provider);\n    }\n\n    /**\n     * Resolve a dependency\n     *\n     * @param target - A class constructor or {@link InjectToken} to resolve\n     * @param optional - Should the dependency be optional. If `true` the injector will not throw an error if it cannot resolve the dependency and returns `undefined`. If `false` the injector will throw an error if the dependency cannot be resolved.\n     */\n    resolve<T> (target: Constructor<T> | InjectToken<T>, optional = false): T | undefined {\n\n        let resolved: T | undefined;\n\n        if (target instanceof InjectToken) {\n\n            resolved = this._resolveToken(target, optional);\n\n        } else {\n\n            resolved = this._resolveConstructor(target, optional);\n        }\n\n        return resolved;\n    }\n\n    /**\n     * @internal\n     */\n    protected _resolveConstructor<T> (constructorFn: Constructor<T>, optional = false): T | undefined {\n\n        const token: InjectToken<T> | undefined = getTokenAnnotation(constructorFn);\n\n        // class was not decorated with @injectable, throw\n        if (!token) throw CLASS_NOT_PROVIDABLE(constructorFn);\n\n        // class has no provider yet, we create one\n        if (!this._getProvider(token)) {\n\n            this.provide(token, new ClassProvider(constructorFn));\n        }\n\n        return this._resolveToken(token, optional);\n    }\n\n    /**\n     * @internal\n     */\n    protected _resolveToken<T> (token: InjectToken<T>, optional = false): T | undefined {\n\n        const provider = this._getProvider(token);\n\n        if (!provider) {\n\n            if (!optional) throw NO_PROVIDER(token);\n\n            return undefined;\n        }\n\n        return provider!.provide(this);\n    }\n\n    /**\n     * @internal\n     */\n    protected _getProvider<T> (token: InjectToken<T>): Provider<T> | undefined {\n\n        if (this._registry.has(token)) {\n\n            return this._registry.get(token);\n\n        } else if (this._parent) {\n\n            return this._parent._getProvider(token);\n        }\n    }\n}\n"],"names":["isConstructor","constructorFn","Function","prototype","constructor","isSymbol","symbol","DESIGN_TYPE","DESIGN_PARAMETER_TYPES","TOKEN","PARAMETERS","PROPERTIES","getTokenAnnotation","target","Reflect","getOwnMetadata","ANNOTATION.TOKEN","setTokenAnnotation","token","defineMetadata","getParameterAnnotation","parameterIndex","ensureParameterAnnotations","ANNOTATION.PARAMETERS","getParameterAnnotations","hasOwnMetadata","parameterAnnotations","map","type","createParameterAnnotation","getPropertyAnnotation","propertyKey","ensurePropertyAnnotation","ANNOTATION.PROPERTIES","getPropertyAnnotations","ensurePropertyAnnotations","properties","hasOwnProperty","propertyType","ANNOTATION.DESIGN_TYPE","createPropertyAnnotation","optional","InjectToken","[object Object]","value","this","Symbol","for","name","description","toString","CLASS_NOT_INJECTABLE","Error","inject","constructorOrToken","isParameterDecorator","injectable","createClassFactory","dependencies","construct","createSingletonFactory","instance","createValueFactory","PROVIDER_UNREGISTERED","BaseProvider","factory","injector","resolveDependencies","resolveProperties","createValue","dependency","resolve","Object","entries","reduce","result","key","assign","ClassProvider","super","SingletonProvider","_instance","provide","ValueProvider","CLASS_NOT_PROVIDABLE","NO_PROVIDER","Injector","parent","Map","_parent","provider","_registry","set","resolved","_resolveToken","_resolveConstructor","_getProvider","has","get"],"mappings":"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"}