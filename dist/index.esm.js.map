{"version":3,"file":"index.esm.js","sources":["../src/utils/index.ts","../src/annotations/metadata-keys.ts","../src/annotations/annotations.ts","../src/inject-token.ts","../src/decorators/inject.ts","../src/decorators/injectable.ts","../src/decorators/optional.ts","../src/factories/class-factory.ts","../src/factories/singleton-factory.ts","../src/factories/value-factory.ts","../src/providers/base-provider.ts","../src/providers/class-provider.ts","../src/providers/singleton-provider.ts","../src/providers/value-provider.ts","../src/injector.ts"],"sourcesContent":["export type Constructor<T = any> = { new (...args: any[]): T; }\n\nexport const isConstructor = (constructorFn: any): constructorFn is Constructor => {\n\n    return constructorFn instanceof Function && constructorFn.prototype && constructorFn.prototype.constructor === constructorFn;\n};\n\nexport const isSymbol = (symbol: any): symbol is Symbol => {\n\n    return typeof symbol === 'symbol';\n};\n","/**\n * @internal\n */\nexport const DESIGN_TYPE = 'design:type';\n\n/**\n * @internal\n */\nexport const DESIGN_PARAMETER_TYPES = 'design:paramtypes';\n\n/**\n * @internal\n */\nexport const TOKEN = 'ioc:token';\n\n/**\n * @internal\n */\nexport const PARAMETERS = 'ioc:parameters';\n\n/**\n * @internal\n */\nexport const PROPERTIES = 'ioc:properties';\n","import { InjectToken } from '../inject-token';\nimport { Constructor } from '../utils';\nimport * as ANNOTATION from './metadata-keys';\n\n/**\n * A dependency annotation describes a constructor parameter or class property dependency\n */\nexport interface DependencyAnnotation<T = any> {\n    token: InjectToken<T> | Constructor<T>;\n    optional: boolean;\n}\n\n/**\n * A map of constructor parameter dependency annotations\n */\nexport type ParameterAnnotations = Map<number, DependencyAnnotation>;\n\n/**\n * A map of class property dependency annotations\n */\nexport type PropertyAnnotations = Map<PropertyKey, DependencyAnnotation>;\n\n/**\n * Gets the {@link InjectToken} of a class\n *\n * @internal\n */\nexport const getTokenAnnotation = <T> (target: Constructor<T>): InjectToken<T> | undefined => {\n\n    return Reflect.getOwnMetadata(ANNOTATION.TOKEN, target);\n};\n\n/**\n * Sets the {@link InjectToken} of a class\n *\n * @internal\n */\nexport const setTokenAnnotation = <T> (target: Constructor<T>, token: InjectToken<T>): void => {\n\n    Reflect.defineMetadata(ANNOTATION.TOKEN, token, target);\n};\n\n/**\n * Gets the {@link DependencyAnnotation} of a constructor parameter\n *\n * @internal\n */\nexport const getParameterAnnotation = (target: Constructor, parameterIndex: number): DependencyAnnotation => {\n\n    ensureParameterAnnotations(target);\n\n    return (Reflect.getOwnMetadata(ANNOTATION.PARAMETERS, target) as ParameterAnnotations).get(parameterIndex)!;\n};\n\n/**\n * Updates a {@link DependencyAnnotation} of a constructor parameter with the values from the partial annotation\n *\n * @internal\n */\nexport const setParameterAnnotation = (\n    target: Constructor,\n    parameterIndex: number,\n    annotation: Partial<DependencyAnnotation>): void => {\n\n    ensureParameterAnnotations(target);\n\n    const annotations = Reflect.getOwnMetadata(ANNOTATION.PARAMETERS, target) as ParameterAnnotations;\n\n    Object.assign(annotations.get(parameterIndex), annotation);\n};\n\n/**\n * Gets the {@link ParameterAnnotations} of a class's constructor\n *\n * @internal\n */\nexport const getParameterAnnotations = (target: Constructor): ParameterAnnotations => {\n\n    ensureParameterAnnotations(target);\n\n    return Reflect.getOwnMetadata(ANNOTATION.PARAMETERS, target) as ParameterAnnotations;\n};\n\n/**\n * Gets the {@link DependencyAnnotation} of a class property\n *\n * @internal\n */\nexport const getPropertyAnnotation = (target: Constructor, propertyKey: PropertyKey): DependencyAnnotation => {\n\n    ensurePropertyAnnotation(target, propertyKey);\n\n    // we have to use a type cast as TypeScript currently doesn't support Symbols as index types\n    return (Reflect.getOwnMetadata(ANNOTATION.PROPERTIES, target) as PropertyAnnotations).get(propertyKey)!;\n};\n\n/**\n * Updates a {@link DependencyAnnotation} of a class property with the values from the partial annotation\n *\n * @internal\n */\nexport const setPropertyAnnotation = (\n    target: Constructor,\n    propertyKey: PropertyKey,\n    annotation: Partial<DependencyAnnotation>): void => {\n\n    ensurePropertyAnnotation(target, propertyKey);\n\n    const annotations = Reflect.getOwnMetadata(ANNOTATION.PROPERTIES, target) as PropertyAnnotations;\n\n    Object.assign(annotations.get(propertyKey), annotation);\n};\n\n/**\n * Gets the {@link PropertyAnnotations} of a class\n *\n * @internal\n */\nexport const getPropertyAnnotations = (target: Constructor): PropertyAnnotations => {\n\n    ensurePropertyAnnotations(target);\n\n    return Reflect.getOwnMetadata(ANNOTATION.PROPERTIES, target) as PropertyAnnotations;\n};\n\n\n\nconst ensureParameterAnnotations = (target: Constructor) => {\n\n    if (!Reflect.hasOwnMetadata(ANNOTATION.PARAMETERS, target)) {\n\n        const parameterTypes: Constructor[] = Reflect.getOwnMetadata(ANNOTATION.DESIGN_PARAMETER_TYPES, target) || [];\n        const parameterAnnotations: ParameterAnnotations = new Map(\n            parameterTypes.map(\n                (type, index) => [index, createDependencyAnnotation(type)] as [number, DependencyAnnotation]\n            ));\n\n        Reflect.defineMetadata(ANNOTATION.PARAMETERS, parameterAnnotations, target);\n    }\n};\n\nconst ensurePropertyAnnotation = (target: Constructor, propertyKey: PropertyKey) => {\n\n    const properties = getPropertyAnnotations(target);\n\n    if (!properties.has(propertyKey)) {\n\n        const propertyType = Reflect.getOwnMetadata(\n            ANNOTATION.DESIGN_TYPE,\n            target.prototype,\n            // we force a type cast here as reflection types the PropertyKey as string | symbol,\n            // at runtime numeric property keys work too\n            propertyKey as string | symbol\n        ) as InjectToken | Constructor;\n\n        properties.set(propertyKey, createDependencyAnnotation(propertyType));\n    }\n};\n\nconst ensurePropertyAnnotations = (target: Constructor) => {\n\n    if (!Reflect.hasOwnMetadata(ANNOTATION.PROPERTIES, target)) {\n\n        Reflect.defineMetadata(ANNOTATION.PROPERTIES, new Map(), target);\n    }\n};\n\nconst createDependencyAnnotation = <T> (\n    token: InjectToken<T> | Constructor<T>,\n    optional = false\n): DependencyAnnotation<T> => ({\n    token: token,\n    optional: optional\n});\n","/**\n * A token that represents a dependency\n *\n * @remarks\n * An {@link InjectToken} should be used to inject any type, which does not have a runtime\n * representation, e.g. an interface, callable type or a plain value. An {@link InjectToken}\n * is tied to a {@link Provider} using the {@link Injector.register} method.\n *\n * ```typescript\n * interface MessageService {\n *      getMessage (): string;\n * }\n *\n * interface MessageClientConfig {\n *      checkMessages: boolean;\n *      answerMessages: boolean;\n * }\n *\n * class FooMessageService implements MessageService {\n *      getMessage () { return 'foo'; }\n * }\n *\n * // use a generic type to tie the token to the interface type\n * const MESSAGE_SERVICE = new InjectToken<MessageService>('MessageService');\n * const CONFIG = new InjectToken<MessageClientConfig>('MessageClientConfig');\n *\n * const injector = new Injector();\n *\n * injector.register(MESSAGE_SERVICE, new ClassProvider(FooMessageService));\n * injector.register(CONFIG, new ValueProvider({ checkMessages: true, answerMessages: false }));\n *\n * injector.resolve(MESSAGE_SERVICE).getMessage(); // --> 'foo'\n * injector.resolve(CONFIG); // --> { checkMessages: true, answerMessages: false }\n * ```\n */\nexport class InjectToken<T = any> {\n\n    constructor (public description: string) { }\n}\n","import { getParameterAnnotation, getPropertyAnnotation, setParameterAnnotation, setPropertyAnnotation } from '../annotations';\nimport { InjectToken } from '../inject-token';\nimport { Constructor } from '../utils';\n\n/**\n * Decorates a class property or constructor parameter as injection target\n *\n * @remarks\n * The inject decorator has two use cases:\n * * Injecting dependencies into class properties\n * * Injecting non-class dependencies through {@link InjectToken}s\n *\n * When used to inject class properties, it can be used without specifying an {@link InjectToken}.\n * The property type will be used as token and the injector will create a {@link ClassProvider} for\n * the type automatically.\n *\n * ```typescript\n * // decorate the dependency as injectable\n * @injectable()\n * class MessageService {\n *     getMessage () { return 'foo'; }\n * }\n *\n * // decorate the consumer as injectable\n * @injectable()\n * class MessageClient {\n *     // decorate the property you want to inject\n *     @inject()\n *     public service!: MessageService;\n * }\n * ```\n *\n * When used to inject non-class properties, an {@link InjectToken} needs to be provided.\n * An {@link InjectToken} can be used for property and parameter injection alike.\n *\n * ```typescript\n * // an interface describing the MessageService\n * interface MessageService {\n *     getMessage (): string;\n * }\n *\n * // an `InjectToken` representing the interface\n * // use a generic type to tie the token to the interface type\n * const MESSAGE_SERVICE = new InjectToken<MessageService>('MessageService');\n *\n * // a class implementing the MessageService interface - decorated as injectable\n * @injectable()\n * class FooMessageService implements MessageService {\n *     getMessage () { return 'foo'; }\n * }\n *\n * // decorate the consumer as injectable\n * @injectable()\n * class MessageClient {\n *     // inject the implementation by using the `InjectToken`\n *     constructor (@inject(MESSAGE_SERVICE) public service: MessageService) {}\n * }\n *\n * // create an `Injector` instance\n * const injector = new Injector();\n *\n * // tell the injector how to resolve the MESSAGE_SERVICE token\n * // we are using a `ClassProvider` here, but we could use other providers as well\n * injector.register(MESSAGE_SERVICE, new ClassProvider(FooMessageService));\n * ```\n *\n * @param injectToken - An {@link InjectToken} identifying the dependency to inject\n */\nexport const inject = <T> (injectToken?: InjectToken<T>) => {\n\n    return (target: Object, propertyKey: PropertyKey, parameterIndex?: number): void => {\n\n        const isParameterDecorator = typeof parameterIndex === 'number';\n\n        const token: InjectToken<T> | Constructor<T> = injectToken instanceof InjectToken\n            ? injectToken\n            : isParameterDecorator\n                ? getParameterAnnotation(target as Constructor, parameterIndex!).token\n                : getPropertyAnnotation(target.constructor as Constructor, propertyKey).token;\n\n        // TODO: This sets the token twice - once during the get (caused by ensure) and then by the set\n        if (isParameterDecorator) {\n\n            setParameterAnnotation(target as Constructor, parameterIndex!, { token });\n\n        } else {\n\n            setPropertyAnnotation(target.constructor as Constructor, propertyKey, { token });\n        }\n    };\n};\n","import { setTokenAnnotation } from '../annotations';\nimport { InjectToken } from '../inject-token';\nimport { Constructor } from '../utils';\n\nexport const injectable = () => {\n\n    return (target: Constructor<object>) => {\n\n        const token = new InjectToken(target.name);\n\n        setTokenAnnotation(target, token);\n    };\n};\n","import { setParameterAnnotation, setPropertyAnnotation } from '../annotations';\nimport { Constructor } from '../utils';\n\nexport const optional = () => {\n\n    return (target: Object, propertyKey: string | symbol, parameterIndex?: number): void => {\n\n        if (typeof parameterIndex === 'number') {\n\n            // decorator is a parameter decorator\n            setParameterAnnotation(target as Constructor, parameterIndex, { optional: true });\n\n        } else {\n\n            // decorator is a property decorator\n            setPropertyAnnotation(target.constructor as Constructor, propertyKey, { optional: true });\n        }\n    };\n};\n","import { Constructor } from '../utils';\nimport { Factory } from './factory';\n\nexport interface ClassFactory<T> extends Factory<T> {\n    (...dependencies: any[]): T;\n}\n\nexport const createClassFactory = <T> (constructorFn: Constructor<T>): ClassFactory<T> => {\n\n    return (...dependencies: any[]) => {\n\n        return Reflect.construct(constructorFn, dependencies);\n    };\n};\n","import { Constructor } from '../utils';\nimport { Factory } from './factory';\n\nexport interface SingletonFactory<T> extends Factory<T> {\n    (...dependencies: any[]): T;\n}\n\nexport const createSingletonFactory = <T> (constructorFn: Constructor<T>): SingletonFactory<T> => {\n\n    let instance: T;\n\n    return (...dependencies: any[]) => {\n\n        if (!instance) instance = Reflect.construct(constructorFn, dependencies);\n\n        return instance;\n    };\n};\n","import { Factory } from './factory';\n\nexport interface ValueFactory<T> extends Factory<T> {\n    (): T;\n}\n\nexport const createValueFactory = <T> (value: T): ValueFactory<T> => {\n\n    return () => value;\n};\n","import { ParameterAnnotations, PropertyAnnotations, DependencyAnnotation } from '../annotations';\nimport { Factory } from '../factories';\nimport { Injector } from '../injector';\nimport { Provider } from './provider';\n\n/**\n * @internal\n */\nexport const PROVIDER_UNREGISTERED = new Error('Provider is not registered with an injector.');\n\n/**\n * The `BaseProvider` class\n *\n * @remarks\n * `BaseProvider` uses a factory function to provide a value. The provider's parameter dependencies\n * will be used to invoke the factory function. The provider's property dependencies will be set on\n * the factory function's return value. Each of the dependencies will be resolved using an\n * `Injector` instance which must be passed to the provider's {@link provide} method.\n *\n * ```typescript\n * @injectable()\n * class Foo {}\n *\n * @injectable()\n * class Bar {}\n *\n * const factory = (foo: Foo, bar: Bar) => ({ foo: foo, bar: bar });\n *\n * const provider = new BaseProvider(factory, new Map([\n *      [0, { token: Foo, optional: false }],\n *      [1, { token: Bar, optional: false }],\n * ]));\n *\n * const injector = new Injector();\n *\n * provider.provide(injector);\n *\n * // or more naturally...\n *\n * interface FooBar {\n *      foo: Foo;\n *      bar: Bar;\n * }\n *\n * const token = new InjectToken<FooBar>('FooBar');\n *\n * injector.register(token, provider);\n *\n * injector.resolve(token)!;\n * ```\n */\nexport class BaseProvider<T> implements Provider<T> {\n\n    public injector: Injector | undefined;\n\n    /**\n     * The `BaseProvider` constructor\n     *\n     * @param factory - The provider's factory function\n     * @param parameters - The parameter dependencies of the factory function\n     * @param properties - The property dependencies of the value returned from the factory function\n     */\n    constructor (\n        public factory: Factory<T>,\n        public parameters: ParameterAnnotations = new Map(),\n        public properties: PropertyAnnotations = new Map()) { }\n\n    /**\n     * Get the provider's provided value\n     *\n     * @param injector - The injector to use to resolve the provider's dependencies\n     * @returns The provider's provided value\n     */\n    provide (injector?: Injector): T {\n\n        if (!injector) injector = this.injector;\n\n        if (!injector) throw PROVIDER_UNREGISTERED;\n\n        const parameters = this.resolveParameters(injector);\n\n        const properties = this.resolveProperties(injector);\n\n        return this.createValue(parameters, properties);\n    }\n\n    /**\n     * Resolves the parameter dependencies for the factory from the current injector\n     *\n     * @param injector - The current injector that runs the provider\n     * @returns An array of resolved parameter dependencies\n     */\n    protected resolveParameters (injector: Injector): any[] {\n\n        const parameters: any[] = [];\n\n        this.parameters.forEach(({ token, optional }, index) => parameters[index] = injector.resolve(token, optional));\n\n        return parameters;\n    }\n\n    /**\n     * Resolves the property dependencies for the factory from the current injector\n     *\n     * @param injector - The current injector that runs the provider\n     * @returns An object of resolved property dependencies\n     */\n    protected resolveProperties (injector: Injector): any {\n\n        const result: any = {};\n\n        this.properties.forEach(({ token, optional }, key) => result[key] = injector.resolve(token, optional));\n\n        return result;\n    }\n\n    /**\n     * Creates the provider's provided value by invoking the factory\n     *\n     * @param parameters - The parameter dependencies of the factory\n     * @param properties - The property dependencies of the instance returned from the factory\n     * @returns The value created by the provider's factory\n     */\n    protected createValue (parameters: any[] = [], properties: any = {}): T {\n\n        const value = this.factory(...parameters);\n\n        return (value instanceof Object) ? Object.assign(value, properties) : value;\n    }\n}\n","import {\n    getParameterAnnotations,\n    getPropertyAnnotations,\n    ParameterAnnotations,\n    PropertyAnnotations\n} from '../annotations';\nimport { createClassFactory } from '../factories';\nimport { Constructor } from '../utils';\nimport { BaseProvider } from './base-provider';\n\n/**\n * A provider for class instances\n *\n * @remarks\n * The `ClassProvider` provides instances of classes. It can be created by passing a reference to a class\n * to its constructor. `ClassProvider` automatically analyzes parameter and property dependencies of the\n * class and resolves them when creating instances.\n *\n * ```typescript\n * @injectable()\n * class Foo { }\n *\n * @injectable()\n * class Bar { }\n *\n * @injectable()\n * class FooBar {\n *\n *     @optional()\n *     @inject()\n *     bar!: Bar;\n *\n *     constructor (public foo: Foo) { }\n * }\n *\n * const provider = new ClassProvider(FooBar);\n * const injector = new Injector();\n *\n * injector.register(FooBar, provider);\n *\n * const fooBar = injector.resolve(FooBar)!;\n * ```\n */\nexport class ClassProvider<T> extends BaseProvider<T> {\n\n    constructor (\n        constructorFn: Constructor<T>,\n        parameters?: ParameterAnnotations,\n        properties?: PropertyAnnotations) {\n\n        super(\n            createClassFactory(constructorFn),\n            parameters || getParameterAnnotations(constructorFn),\n            properties || getPropertyAnnotations(constructorFn)\n        );\n    }\n}\n","import { ClassProvider } from './class-provider';\nimport { Injector } from '../injector';\n\n/**\n * A provider for singleton class instances\n *\n * @remarks\n * The `SingletonProvidr` caches the first instance of a class it creates and subsequently\n * returns the cached instance instead of creating new instances.\n */\nexport class SingletonProvider<T> extends ClassProvider<T> {\n\n    protected _instance: T | undefined;\n\n    provide (injector?: Injector): T {\n\n        if (!this._instance) this._instance = super.provide(injector);\n\n        return this._instance;\n    }\n}\n","import { createValueFactory } from '../factories';\nimport { BaseProvider } from './base-provider';\n\n/**\n * A provider for static values\n *\n * @remarks\n * The `ValueProvider` provides an already existing value and therefore has no dependencies.\n * This is useful for providing primitive values, configuration objects or any value that\n * does not need to be instantiated.\n *\n * ```typescript\n * const CONFIG = {\n *      receiveMessages: true,\n *      answerMessages: false,\n *      channelId: 'some_id'\n * }\n *\n * const token = new InjectToken('CONFIG');\n *\n * const injector = new injector();\n *\n * injector.register(token, new ValueProvider(CONFIG));\n *\n * injector.resolve(token)!; // --> { receiveMessages: true, answerMessages: false, channelId: 'some_id' }\n * ```\n */\nexport class ValueProvider<T> extends BaseProvider<T> {\n\n    constructor (value: T) {\n\n        super(createValueFactory(value));\n    }\n}\n","import { getTokenAnnotation } from './annotations';\nimport { InjectToken } from './inject-token';\nimport { ClassProvider, Provider, ValueProvider } from './providers';\nimport { Constructor } from './utils';\nimport { injectable } from './decorators';\n\n/**\n * @internal\n */\nexport const CLASS_NOT_PROVIDABLE = (constructorFn: Constructor) => new Error(`Class '${ constructorFn.name }' has not been decorated as injectable and cannot be provided.`);\n\n/**\n * @internal\n */\nexport const CLASS_NOT_RESOLVABLE = (constructorFn: Constructor) => new Error(`Class '${ constructorFn.name }' has not been decorated as injectable and cannot be resolved.`);\n\n/**\n * @internal\n */\nexport const NO_PROVIDER = (token: InjectToken) => new Error(`No provider has been found for the requested token '${ token.description }'.`);\n\n// TODO: update docs\n/**\n * The injector class\n *\n * @remarks\n * The `Injector` class is a reflective, hierarchical dependency injection container. Reflective means\n * that it relies on metadata reflection to resolve dependencies. Hierarchical means that it can have\n * child-containers. Child-containers can register different providers for tokens, but can also look\n * up tokens from their respective parent-containers.\n */\n@injectable()\nexport class Injector {\n\n    private _registry: Map<InjectToken<any>, Provider<any>> = new Map();\n\n    private _parent: Injector | null = null;\n\n    /**\n     * Creates an injector instance.\n     *\n     * @remarks\n     * A child injector can be created by passing the parent injector as a constructor argument.\n     *\n     * ```typescript\n     * const rootInjector = new Injector();\n     * const childInjector = new Injector(rootInjector);\n     * ```\n     *\n     * @param parent - A parent injector\n     */\n    constructor (parent?: Injector) {\n\n        if (parent) this._parent = parent;\n\n        // register the `Injector` instance itself\n        this.register(Injector, new ValueProvider(this));\n    }\n\n    /**\n     * Register a provider for a dependency with the injector\n     *\n     * @param constructorOrToken - The class or {@link InjectToken} for which to register a provider for\n     * @param provider - The {@link Provider} which will be used to resolve the class or token\n     */\n    register<T> (constructorOrToken: Constructor<T> | InjectToken<T>, provider: Provider<T>) {\n\n        const token: InjectToken<T> | undefined = constructorOrToken instanceof InjectToken\n            ? constructorOrToken\n            : getTokenAnnotation(constructorOrToken);\n\n        // class was not decorated with @injectable, throw\n        if (!token) throw CLASS_NOT_PROVIDABLE(constructorOrToken as Constructor);\n\n        provider.injector = this;\n\n        this._registry.set(token, provider);\n    }\n\n    /**\n     * Resolve a dependency\n     *\n     * @param target - The class or {@link InjectToken} to resolve\n     * @param optional - Should the dependency be optional. If `true` the injector will not throw an\n     * error if it cannot resolve the dependency and returns `undefined`. If `false` the injector will\n     * throw an error if the dependency cannot be resolved.\n     */\n    resolve<T> (target: Constructor<T> | InjectToken<T>, optional = false): T | undefined {\n\n        let resolved: T | undefined;\n\n        if (target instanceof InjectToken) {\n\n            resolved = this._resolveToken(target, optional);\n\n        } else {\n\n            resolved = this._resolveConstructor(target, optional);\n        }\n\n        return resolved;\n    }\n\n    /**\n     * @internal\n     */\n    protected _resolveConstructor<T> (constructorFn: Constructor<T>, optional = false): T | undefined {\n\n        const token: InjectToken<T> | undefined = getTokenAnnotation(constructorFn);\n\n        // class was not decorated with @injectable, throw if not optional\n        if (!token) {\n\n            if (!optional) throw CLASS_NOT_RESOLVABLE(constructorFn);\n\n            return undefined;\n        }\n\n        // class has no provider yet, we create one\n        if (!this._getProvider(token)) {\n\n            this.register(token, new ClassProvider(constructorFn));\n        }\n\n        return this._resolveToken(token, optional);\n    }\n\n    /**\n     * @internal\n     */\n    protected _resolveToken<T> (token: InjectToken<T>, optional = false): T | undefined {\n\n        const provider = this._getProvider(token);\n\n        // token has no provider, throw if not optional\n        if (!provider) {\n\n            if (!optional) throw NO_PROVIDER(token);\n\n            return undefined;\n        }\n\n        return provider!.provide(this);\n    }\n\n    /**\n     * @internal\n     */\n    protected _getProvider<T> (token: InjectToken<T>): Provider<T> | undefined {\n\n        if (this._registry.has(token)) {\n\n            return this._registry.get(token);\n\n        } else if (this._parent) {\n\n            return this._parent._getProvider(token);\n        }\n    }\n}\n"],"names":["isConstructor","constructorFn","Function","prototype","constructor","isSymbol","symbol","PARAMETERS","PROPERTIES","getTokenAnnotation","target","Reflect","getOwnMetadata","setTokenAnnotation","token","defineMetadata","getParameterAnnotation","parameterIndex","ensureParameterAnnotations","ANNOTATION.PARAMETERS","get","setParameterAnnotation","annotation","annotations","Object","assign","getParameterAnnotations","getPropertyAnnotation","propertyKey","ensurePropertyAnnotation","ANNOTATION.PROPERTIES","setPropertyAnnotation","getPropertyAnnotations","ensurePropertyAnnotations","hasOwnMetadata","parameterTypes","parameterAnnotations","Map","map","type","index","createDependencyAnnotation","properties","has","propertyType","set","optional","InjectToken","[object Object]","description","this","inject","injectToken","isParameterDecorator","injectable","name","createClassFactory","dependencies","construct","createSingletonFactory","instance","createValueFactory","value","PROVIDER_UNREGISTERED","Error","BaseProvider","factory","parameters","injector","resolveParameters","resolveProperties","createValue","forEach","resolve","result","key","ClassProvider","super","SingletonProvider","_instance","provide","ValueProvider","CLASS_NOT_PROVIDABLE","CLASS_NOT_RESOLVABLE","NO_PROVIDER","Injector","parent","_parent","register","Injector_1","constructorOrToken","provider","_registry","resolved","_resolveToken","_resolveConstructor","_getProvider"],"mappings":"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"}